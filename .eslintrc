{
	"root": true,
	"extends": ["plugin:@wordpress/eslint-plugin/recommended"],
	"globals": {
		"wp": "off"
	},
	"settings": {
		"jsdoc": {
			"mode": "typescript"
		},
		"import/internal-regex": null
	},
	"rules": {
		"@wordpress/dependency-group": "error",
		"@wordpress/is-gutenberg-plugin": "error",
		"@wordpress/react-no-unsafe-timeout": "error",
		"@wordpress/i18n-text-domain": [
			"error",
			{
				"allowedTextDomain": "kww"
			}
		],
		"@wordpress/no-unsafe-wp-apis": "off",
		"@wordpress/data-no-store-string-literals": "error",
		"import/default": "error",
		"import/named": "error",
		"no-restricted-imports": [
			"error",
			{
				"paths": [
					{
						"name": "framer-motion",
						"message": "Please use the Framer Motion API through `@wordpress/components` instead."
					},
					{
						"name": "lodash",
						"importNames": ["memoize"],
						"message": "Please use `memize` instead."
					},
					{
						"name": "reakit",
						"message": "Please use Reakit API through `@wordpress/components` instead."
					},
					{
						"name": "redux",
						"importNames": ["combineReducers"],
						"message": "Please use `combineReducers` from `@wordpress/data` instead."
					},
					{
						"name": "puppeteer-testing-library",
						"message": "`puppeteer-testing-library` is still experimental."
					},
					{
						"name": "@emotion/css",
						"message": "Please use `@emotion/react` and `@emotion/styled` in order to maintain iframe support. As a replacement for the `cx` function, please use the `useCx` hook defined in `@wordpress/components` instead."
					}
				]
			}
		],
		"@typescript-eslint/no-restricted-imports": [
			"error",
			{
				"paths": [
					{
						"name": "react",
						"message": "Please use React API through `@wordpress/element` instead.",
						"allowTypeImports": true
					}
				]
			}
		],
		"no-restricted-syntax": [
			"error",
			{
				"selector": "ImportDeclaration[source.value=/^@wordpress\\u002F.+\\u002F/]",
				"message": "Path access on WordPress dependencies is not allowed."
			},
			{
				"selector": "CallExpression[callee.object.name=\"page\"][callee.property.name=\"waitFor\"]",
				"message": "This method is deprecated. You should use the more explicit API methods available."
			},
			{
				"selector": "CallExpression[callee.object.name=\"page\"][callee.property.name=\"waitForTimeout\"]",
				"message": "Prefer page.waitForSelector instead."
			},
			{
				"selector": "JSXAttribute[name.name=\"id\"][value.type=\"Literal\"]",
				"message": "Do not use string literals for IDs; use withInstanceId instead."
			},
			{
				"selector": "CallExpression[callee.object.name=\"Math\"][callee.property.name=\"random\"]",
				"message": "Do not use Math.random() to generate unique IDs; use withInstanceId instead. (If youâ€™re not generating unique IDs: ignore this message.)"
			},
			{
				"selector": "CallExpression[callee.name=\"withDispatch\"] > :function > BlockStatement > :not(VariableDeclaration,ReturnStatement)",
				"message": "withDispatch must return an object with consistent keys. Avoid performing logic in `mapDispatchToProps`."
			},
			{
				"selector": "LogicalExpression[operator=\"&&\"][left.property.name=\"length\"][right.type=\"JSXElement\"]",
				"message": "Avoid truthy checks on length property rendering, as zero length is rendered verbatim."
			}
		]
	},
	"overrides": [
		{
			"files": [
				"**/@(storybook|stories)/*",
				"packages/components/src/**/*.tsx"
			],
			"rules": {
				"jsdoc/require-param": "off",
				"@wordpress/dependency-group": "off",
				"@typescript-eslint/no-restricted-imports": "off",
				"prettier/prettier": [
					"error",
					{
						"endOfLine": "auto"
					}
				]
			}
		}
	]
}
